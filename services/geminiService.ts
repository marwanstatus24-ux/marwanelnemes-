import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Extracts a descriptive prompt from a style image.
 * @param imageBase64 The base64 encoded style image.
 * @returns A promise that resolves to the generated text prompt.
 */
export const extractPromptFromImage = async (imageBase64: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: {
            parts: [
                {
                    inlineData: {
                        mimeType: 'image/jpeg',
                        data: imageBase64,
                    },
                },
                {
                    text: 'Describe the artistic style of this image in a detailed, copyable prompt for an image generation AI. Focus on lighting, color palette, composition, subject style, and overall mood. Be descriptive and concise.',
                },
            ],
        },
    });
    return response.text;
};

/**
 * Generates a new image by applying a style prompt to a personal image.
 * @param personalImageBase64 The base64 encoded personal image.
 * @param personalImageMimeType The MIME type of the personal image.
 * @param stylePrompt The descriptive style prompt.
 * @returns A promise that resolves to the base64 string of the generated image.
 */
export const generateStyledImage = async (
    personalImageBase64: string,
    personalImageMimeType: string,
    stylePrompt: string
): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                {
                    inlineData: {
                        data: personalImageBase64,
                        mimeType: personalImageMimeType,
                    },
                },
                {
                    text: `Recreate the person in this image with the following artistic style. Keep the person's main features but apply the new style. Style: ${stylePrompt}`,
                },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    const imagePart = response.candidates?.[0]?.content?.parts.find(part => part.inlineData);
    if (imagePart?.inlineData?.data) {
        return imagePart.inlineData.data;
    }
    throw new Error('No image was generated by the API.');
};


/**
 * Applies further text-based edits to an existing image.
 * @param baseImageBase64 The base64 encoded image to be edited.
 * @param baseImageMimeType The MIME type of the image.
 * @param editsPrompt The prompt describing the edits.
 * @returns A promise that resolves to the base64 string of the edited image.
 */
export const applyExtraEdits = async (
    baseImageBase64: string,
    baseImageMimeType: string,
    editsPrompt: string
): Promise<string> => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                {
                    inlineData: {
                        data: baseImageBase64,
                        mimeType: baseImageMimeType,
                    },
                },
                {
                    text: editsPrompt,
                },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    const imagePart = response.candidates?.[0]?.content?.parts.find(part => part.inlineData);
    if (imagePart?.inlineData?.data) {
        return imagePart.inlineData.data;
    }
    throw new Error('No image was generated by the API for the edits.');
};
